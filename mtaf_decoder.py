
import tkinter as tk
from tkinter import filedialog, messagebox
import struct
import os

mtaf_step_indexes = [-1, -1, -1, -1, 2, 4, 6, 8, -1, -1, -1, -1, 2, 4, 6, 8]
mtaf_step_sizes = [
    [1, 5, 9, 13, 16, 20, 24, 28, -1, -5, -9, -13, -16, -20, -24, -28],
    [2, 6, 11, 15, 20, 24, 29, 33, -2, -6, -11, -15, -20, -24, -29, -33],
    [2, 7, 13, 18, 23, 28, 34, 39, -2, -7, -13, -18, -23, -28, -34, -39],
    [3, 9, 15, 21, 28, 34, 40, 46, -3, -9, -15, -21, -28, -34, -40, -46],
    [3, 11, 18, 26, 33, 41, 48, 56, -3, -11, -18, -26, -33, -41, -48, -56],
    [4, 13, 22, 31, 40, 49, 58, 67, -4, -13, -22, -31, -40, -49, -58, -67],
    [5, 16, 26, 37, 48, 59, 69, 80, -5, -16, -26, -37, -48, -59, -69, -80],
    [6, 19, 31, 44, 57, 70, 82, 95, -6, -19, -31, -44, -57, -70, -82, -95],
    [7, 22, 38, 53, 68, 83, 99, 114, -7, -22, -38, -53, -68, -83, -99, -114],
    [9, 27, 45, 63, 81, 99, 117, 135, -9, -27, -45, -63, -81, -99, -117, -135],
    [10, 32, 53, 75, 96, 118, 139, 161, -10, -32, -53, -75, -96, -118, -139, -161],
    [12, 38, 64, 90, 115, 141, 167, 193, -12, -38, -64, -90, -115, -141, -167, -193],
    [15, 45, 76, 106, 137, 167, 198, 228, -15, -45, -76, -106, -137, -167, -198, -228],
    [18, 54, 91, 127, 164, 200, 237, 273, -18, -54, -91, -127, -164, -200, -237, -273],
    [21, 65, 108, 152, 195, 239, 282, 326, -21, -65, -108, -152, -195, -239, -282, -326],
    [25, 77, 129, 181, 232, 284, 336, 388, -25, -77, -129, -181, -232, -284, -336, -388],
    [30, 92, 153, 215, 276, 338, 399, 461, -30, -92, -153, -215, -276, -338, -399, -461],
    [36, 109, 183, 256, 329, 402, 476, 549, -36, -109, -183, -256, -329, -402, -476, -549],
    [43, 130, 218, 305, 392, 479, 567, 654, -43, -130, -218, -305, -392, -479, -567, -654],
    [52, 156, 260, 364, 468, 572, 676, 780, -52, -156, -260, -364, -468, -572, -676, -780],
    [62, 186, 310, 434, 558, 682, 806, 930, -62, -186, -310, -434, -558, -682, -806, -930],
    [73, 221, 368, 516, 663, 811, 958, 1106, -73, -221, -368, -516, -663, -811, -958, -1106],
    [87, 263, 439, 615, 790, 966, 1142, 1318, -87, -263, -439, -615, -790, -966, -1142, -1318],
    [104, 314, 523, 733, 942, 1152, 1361, 1571, -104, -314, -523, -733, -942, -1152, -1361, -1571],
    [124, 374, 623, 873, 1122, 1372, 1621, 1871, -124, -374, -623, -873, -1122, -1372, -1621, -1871],
    [148, 445, 743, 1040, 1337, 1634, 1932, 2229, -148, -445, -743, -1040, -1337, -1634, -1932, -2229],
    [177, 531, 885, 1239, 1593, 1947, 2301, 2655, -177, -531, -885, -1239, -1593, -1947, -2301, -2655],
    [210, 632, 1053, 1475, 1896, 2318, 2739, 3161, -210, -632, -1053, -1475, -1896, -2318, -2739, -3161],
    [251, 753, 1255, 1757, 2260, 2762, 3264, 3766, -251, -753, -1255, -1757, -2260, -2762, -3264, -3766],
    [299, 897, 1495, 2093, 2692, 3290, 3888, 4486, -299, -897, -1495, -2093, -2692, -3290, -3888, -4486],
    [356, 1068, 1781, 2493, 3206, 3918, 4631, 5343, -356, -1068, -1781, -2493, -3206, -3918, -4631, -5343],
    [424, 1273, 2121, 2970, 3819, 4668, 5516, 6365, -424, -1273, -2121, -2970, -3819, -4668, -5516, -6365]
]
def parse_mtaf_frame_header(frame, channel, first_sample):
    # Initialize variables
    hist = 0
    step_index = 0

    # Channel handling for stereo interleave
    ch = channel % 2

    # Parse frame header
    if first_sample == 0:
        step_index = int.from_bytes(frame[0x04 + ch * 0x02:0x06 + ch * 0x02], 'little', signed=True)
        hist = int.from_bytes(frame[0x04 + ch * 0x04:0x08 + ch * 0x04], 'little', signed=True)

        # Clamp step_index within range
        step_index = max(0, min(step_index, 31))

    return hist, step_index

def clamp16(value):
    """Clamps the given value to a 16-bit signed integer range."""
    return max(-32768, min(32767, value))

def decode_mtaf_audio(frame, channel, first_sample, samples_to_do, interleave_block_size):
    # Variables for ADPCM decoding
    hist = 0
    step_index = 0

    # Calculate the correct starting point for the channel data
    channel_offset = channel % 2
    frame_start = 0x10  # Skip the 0x10-byte header

    output = []
    # Decoding loop
    for i in range(first_sample, first_sample + samples_to_do):
        byte_index = frame_start + (i // 2) * interleave_block_size + channel_offset
        nibbles = frame[byte_index]
        nibble = (nibbles >> (0 if i % 2 == 0 else 4)) & 0xf

        hist = clamp16(hist + mtaf_step_sizes[step_index][nibble])
        output.append(hist)

        step_index += mtaf_step_indexes[nibble]
        step_index = max(0, min(step_index, 31))

    return output


